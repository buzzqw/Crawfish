{"version":3,"sources":["screen/TorrentManager.js","App.js","reportWebVitals.js","index.js"],"names":["theme","createTheme","palette","mode","TorrentManager","props","useState","baseUrl","setBaseUrl","key","setKey","path","process","protocol","window","location","domain","hostname","port","console","log","ThemeProvider","CssBaseline","Container","maxWidth","Stack","spacing","alignItems","direction","TextField","id","type","variant","value","helperText","onChange","e","target","Button","startIcon","Save","onClick","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0hCAKMA,EAAQC,YAAY,CACtBC,QAAS,CACLC,KAAM,UA2CCC,MAvCf,SAAwBC,GACpB,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAsBF,mBAAS,MAA/B,mBAAOG,EAAP,KAAYC,EAAZ,KACIC,EAAOC,IACX,IAAKH,GAAe,MAARE,EAAc,CACtB,IAAIE,EAAWC,OAAOC,SAASF,SAC3BG,EAASF,OAAOC,SAASE,SACzBC,EAAOJ,OAAOC,SAASG,KAC3BP,EAAO,UAAGE,EAAH,aAAgBG,GAAhB,OAAyBE,EAAQ,IAAIA,EAAQ,IAAKN,IACzDF,EAAOC,GAGX,OADAQ,QAAQC,IAAI,eAAgBT,GAAQJ,GAEhC,eAACc,EAAA,EAAD,CAAerB,MAAOA,EAAtB,UACI,cAACsB,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAWC,SAAS,QAApB,SACA,eAACC,EAAA,EAAD,CAAOC,QAAS,EAAGC,WAAY,SAA/B,WACUhB,GAAQ,eAACc,EAAA,EAAD,CAAOG,UAAW,MAAOF,QAAS,EAAlC,UACN,cAACG,EAAA,EAAD,CACIC,GAAI,UACJC,KAAK,OACLC,QAAS,WACTC,MAAO1B,EACP2B,WAAY,2EACZC,SAAU,SAACC,GACP5B,EAAW4B,EAAEC,OAAOJ,UAG5B,cAACK,EAAA,EAAD,CAAQC,UAAW,cAACC,EAAA,EAAD,IAASC,QAAS,WACjC/B,EAAOH,IADX,uBAIHE,EAAM,cAAC,IAAD,CAAyBF,QAASI,GAAQJ,GAAtBE,GAAmC,cChCnEiC,MARf,WACI,OACI,qBAAKC,UAAU,MAAf,SACI,cAAC,EAAD,OCMGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.073652f2.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport {Button, Container, createTheme, CssBaseline, Stack, TextField, ThemeProvider} from \"@mui/material\";\r\nimport {WebTorrentGui} from \"webtorrent-web-gui\";\r\nimport {Save} from \"@mui/icons-material\";\r\n\r\nconst theme = createTheme({\r\n    palette: {\r\n        mode: 'dark'\r\n    }\r\n})\r\n\r\nfunction TorrentManager(props) {\r\n    const [baseUrl, setBaseUrl] = useState(\"\");\r\n    const [key, setKey] = useState(null);\r\n    let path = process.env.REACT_APP_BASE_PATH\r\n    if (!key && path != null) {\r\n        let protocol = window.location.protocol;\r\n        let domain = window.location.hostname;\r\n        let port = window.location.port;\r\n        path = `${protocol}//${domain}${port ? (\":\"+port) : \"\"}`+process.env.REACT_APP_BASE_PATH\r\n        setKey(path);\r\n    }\r\n    console.log(\"CHECK PATH: \", path || baseUrl)\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <CssBaseline/>\r\n            <Container maxWidth=\"false\">\r\n            <Stack spacing={2} alignItems={\"center\"}>\r\n                    {!path && <Stack direction={\"row\"} spacing={4}>\r\n                        <TextField\r\n                            id={\"baseUrl\"}\r\n                            type=\"text\"\r\n                            variant={\"outlined\"}\r\n                            value={baseUrl}\r\n                            helperText={\"Insert here the path of your remote instance (Es. http://localhost:3000)\"}\r\n                            onChange={(e) => {\r\n                                setBaseUrl(e.target.value)\r\n                            }}\r\n                        />\r\n                        <Button startIcon={<Save/>} onClick={() => {\r\n                            setKey(baseUrl)\r\n                        }}> Save </Button>\r\n                    </Stack>}\r\n                    {key ? <WebTorrentGui key={key} baseUrl={path || baseUrl}/> : null}\r\n                </Stack>\r\n            </Container>\r\n        </ThemeProvider>\r\n    );\r\n}\r\n\r\nexport default TorrentManager;\r\n","import './App.css';\nimport TorrentManager from \"./screen/TorrentManager\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <TorrentManager/>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}